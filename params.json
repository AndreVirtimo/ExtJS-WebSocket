{"name":"ExtJS WebSocket","tagline":"Ext.ux.WebSocket is an extension to manage HTML5 WebSocket with ExtJS","body":"# ExtJS-WebSocket\r\n\r\nExtJS-WebSocket is an extension to handle and use the HTML5 WebSocket with ExtJS.\r\n\r\nIt has two classes: `Ext.ux.WebSocket` and `Ext.ux.WebSocketManager`<br/>\r\nThe first one is a wrapper for standard HTML5 WebSocket and it provides a lot of interesting and easy-to-use features.\r\nThe second one is a singleton to register different Ext.ux.WebSocket and it provides functions to work with every registered websocket at the same time.\r\n\r\n## Usage\r\nLoad `Ext.ux.WebSocket` and `Ext.ux.WebSocketManager` via `Ext.require`:\r\n\r\n```javascript\r\nExt.Loader.setConfig ({\r\n\tenabled: true\r\n});\r\n\r\nExt.require (['Ext.ux.WebSocket', 'Ext.ux.WebSocketManager']);\r\n```\r\n\r\nNow, you are ready to use them in your code as follows:\r\n\r\n```javascript\r\n// Creating a new instance of Ext.ux.WebSocket\r\nvar ws = Ext.create ('Ext.ux.WebSocket', {\r\n\turl: 'your_url:your_port' ,\r\n\tprotocol: 'your_protocol'\r\n});\r\n\r\n// Using Ext.ux.WebSocketManager\r\nExt.ux.WebSocketManager.register (ws);\r\n```\r\n\r\n## Communications supported\r\n### Pure text communication\r\nThe communication is text-only, without objects or any other kind of data.\r\n\r\n```javascript\r\nvar websocket = Ext.create ('Ext.ux.WebSocket', {\r\n\turl: 'ws://localhost:8888' ,\r\n\tlisteners: {\r\n\t\topen: function (ws) {\r\n\t\t\tconsole.log ('The websocket is ready to use');\r\n\t\t\tws.send ('This is a simple text');\r\n\t\t} ,\r\n\t\tclose: function (ws) {\r\n\t\t\tconsole.log ('The websocket is closed!');\r\n\t\t} ,\r\n\t\terror: function (ws, error) {\r\n\t\t\tExt.Error.raise (error);\r\n\t\t} ,\r\n\t\tmessage: function (ws, message) {\r\n\t\t\tconsole.log ('A new message is arrived: ' + message);\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\n### Pure event-driven communication\r\nThe communication is event-driven: an event and a String or Object are sent and the websocket handles different events.\r\n\r\n```javascript\r\nvar websocket = Ext.create ('Ext.ux.WebSocket', {\r\n\turl: 'ws://localhost:8888' ,\r\n\tlisteners: {\r\n\t\topen: function (ws) {\r\n\t\t\tconsole.log ('The websocket is ready to use');\r\n\t\t\tws.send ('init', 'This is a simple text');\r\n\t\t\tws.send ('and continue', {\r\n\t\t\t\t'my': 'data' ,\r\n\t\t\t\t'your': 'data'\r\n\t\t\t});\r\n\t\t} ,\r\n\t\tclose: function (ws) {\r\n\t\t\tconsole.log ('The websocket is closed!');\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// A 'stop' event is sent from the server\r\n// 'data' has 'cmd' and 'msg' fields\r\nwebsocket.on ('stop', function (data) {\r\n\tconsole.log ('Command: ' + data.cmd);\r\n\tconsole.log ('Message: ' + data.msg);\r\n});\r\n```\r\n\r\n### Mixed communication\r\nThe communication is mixed: it can handles text-only and event-driven communication.\r\n\r\n```javascript\r\nvar websocket = Ext.create ('Ext.ux.WebSocket', {\r\n\turl: 'ws://localhost:8888' ,\r\n\tlisteners: {\r\n\t\topen: function (ws) {\r\n\t\t\tconsole.log ('The websocket is ready to use');\r\n\t\t\tws.send ('This is only-text message');\r\n\t\t\tws.send ('init', 'This is a simple text');\r\n\t\t\tws.send ('and continue', {\r\n\t\t\t\t'my': 'data' ,\r\n\t\t\t\t'your': 'data'\r\n\t\t\t});\r\n\t\t} ,\r\n\t\tclose: function (ws) {\r\n\t\t\tconsole.log ('The websocket is closed!');\r\n\t\t} ,\r\n\t\tmessage: function (ws, message) {\r\n\t\t\tconsole.log ('Text-only message arrived is: ' + message);\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// A 'stop' event is sent from the server\r\n// 'data' has 'cmd' and 'msg' fields\r\nwebsocket.on ('stop', function (data) {\r\n\tconsole.log ('Command: ' + data.cmd);\r\n\tconsole.log ('Message: ' + data.msg);\r\n});\r\n```\r\n\r\n## Ext.ux.WebSocketManager features\r\nHere's an example of the manager:\r\n\r\n```javascript\r\nvar ws1 = Ext.create ('Ext.ux.WebSocket', {\r\n\turl: 'ws://localhost:8888'\r\n});\r\n\r\nExt.ux.WebSocketManager.register (ws1);\r\n\r\nvar ws2 = Ext.create ('Ext.ux.WebSocket', {\r\n\turl: 'ws://localhost:8900'\r\n});\r\n\r\nExt.ux.WebSocketManager.register (ws2);\r\n\r\nvar ws3 = Ext.create ('Ext.ux.WebSocket', {\r\n\turl: 'ws://localhost:8950'\r\n});\r\n\r\nExt.ux.WebSocketManager.register (ws3);\r\n\r\nExt.ux.WebSocketManager.listen ('system shutdown', function (ws, data) {\r\n\tExt.Msg.show ({\r\n\t\ttitle: 'System Shutdown' ,\r\n\t\tmsg: data ,\r\n\t\ticon: Ext.Msg.WARNING ,\r\n\t\tbuttons: Ext.Msg.OK\r\n\t});\r\n});\r\n\r\n// This will be handled by everyone\r\nExt.ux.WebSocketManager.broadcast ('system shutdown', 'BROADCAST: the system will shutdown in few minutes.');\r\n\r\nExt.ux.WebSocketManager.closeAll ();\r\n\r\nExt.ux.WebSocketManager.unregister (ws1);\r\nExt.ux.WebSocketManager.unregister (ws2);\r\nExt.ux.WebSocketManager.unregister (ws3);\r\n```\r\n\r\n## Run the demo\r\n**I suggest to use [**virtualenv**](http://www.virtualenv.org) to test the demo.**\r\n\r\nFirst of all, you need [**virtualenv**](http://www.virtualenv.org):\r\n\r\n```bash\r\n$ sudo apt-get install virtualenv\r\n```\r\n\r\nThen, make a virtual environment:\r\n\r\n```bash\r\n$ virtualenv venv\r\n```\r\n\r\nAnd install `Tornado`:\r\n\r\n```bash\r\n$ . /venv/bin/activate\r\n(venv)$ pip tornado\r\n```\r\n\r\nFinally, start the server:\r\n\r\n```bash\r\n(venv)$ python /var/www/ExtJS-WebSocket/server.py 8888 9999 10000\r\n```\r\n\r\nNow, you have three websockets listening at 8888, 9999 and 10000 port on the server side!\r\nThen, type in the address bar of your browser: **http://localhost/ExtJS-WebSocket** and play the demo ;)\r\n\r\n## Documentation\r\nYou can build the documentation (like ExtJS Docs) with [**jsduck**](https://github.com/senchalabs/jsduck):\r\n\r\n```bash\r\n$ jsduck ux --output /var/www/docs\r\n```\r\n\r\nIt will make the documentation into docs dir and it will be visible at: http://localhost/docs\r\n\r\n## License\r\n(GNU GPLv3)\r\n\r\nCopyright (c) 2012 Vincenzo Ferrari <wilk3ert@gmail.com>\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}